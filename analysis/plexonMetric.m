function [signals, waveformData, refSpikeTimes, dataSpikeTimes, binnedXcorr, VPDist, VRDist, SchreiberDist]...
        = plexonMetric(data, reference, binSize)
    
% Plot and compare the measured Plexon data against a reference signal.
%
% Inputs:
%   data - name of the saved plexon file, without file extension
%   reference - currently should only be signal generated by
%               "Noisy Spike Generator MATLAB Software v1.1" by Leslie Smith and
%               Nhamoinesu Mtetwa.
%               The named mat file contains variables r1, signals, and target. Details
%               given in the software manual.
%
%  Outputs:
%   signals - reference waveform signal, original
%   waveformData - wireless recording waveform data, normalized to [-1,1].
%   refSpikeTimes - spike times of reference signal, after aligning the first peak with that of recording.
%   dataSpikeTimes - spike times of wireless recording, after aligning the first with that of reference.
%   binnedXcorr - struct containing d_CC and acor_lag. d_CC is binned cross-correlation similarity measure.
%                 acor_lag is a cell-array of the cross-correlation of the binned firing rates.
%   VPDist - Victor-purpura distances.
%   VRDist - Van Rossum distances.
%   SchreiberDist - Schreiber distances. 

    Fs_plexon = 20000;     % Plexon sampling frequency, in Hz
    Fs_ref = 31250;        % Reference sampling frequency, in Hz

    load(reference);                        % r1, signals, target
    refSpikeTimes = target.targettimes.';   % in seconds, convert to column vector

    % Load plexon data
    waveformFile = sprintf('%s_analog.mat', data);
    spikeFile = sprintf('%s_spkwav.mat', data);
    load(waveformFile);
    load(spikeFile);

    % Time vector for plexon
    waveformData = double(AD12);
    waveformData = waveformData./max(abs(waveformData));
    plexTime = double(AD12_ts);       % generate time vector for plexon waveform

    % interpolate waveformData to 31250Hz.
    waveformData = interp1(plexTime, waveformData, plexTime(1):1/Fs_ref:plexTime(end));

    % Plexon recording might have extra stuff in the end due to manually stopping audio signal.
    % Cut this off manually. Make sure the waveform is not more than 2 seconds longer than reference.
    maxLen = numel(signals)+2*Fs_ref;
    maxTime = maxLen/Fs_ref;
    if numel(waveformData) > maxLen,
        waveformData = waveformData(1:maxLen);
    end

    [refFirstPeak, dataFirstPeak] = align_by_waveform_firstSpike(waveformData, signals, Fs_ref, refSpikeTimes, 0.7, 'Plexon Reference and Recording');

    % Now get the Plexon spike timings
    timelag = (dataFirstPeak-refFirstPeak)/Fs_ref;
    dataSpikeTimes = sig001a - timelag;     % shift by the signal offset
    % make sure we don't include extra spikes from not stopping audio signal fast enough.
    if ~find(dataSpikeTimes > (maxTime - timelag)),
        dataSpikeTimes = dataSpikeTimes(1:min(find(dataSpikeTimes > (maxTime - timelag))));
    end

    [binnedXcorr, VPDist, VRDist, SchreiberDist] = ...
        compareSpikeTimes(refSpikeTimes, dataSpikeTimes, binSize, 'Plexon');
end





