function [signals, waveformData, refSpikeTimes, dataSpikeTimes] = plexonMetric(data, reference)
    
    % Plot and compare the measured Plexon data against a reference signal.
    %
    %  data - name of the saved plexon file, without file extension
    %  reference - currently should only be signal generated by
    %              "Noisy Spike Generator MATLAB Software v1.1" by Leslie Smith and
    %              Nhamoinesu Mtetwa.
    %              
    %              The named mat file contains variables r1, signals, and target. Details
    %              given in the software manual.

    Fs_plexon = 20000;     % Plexon sampling frequency, in Hz
    Fs_ref = 31250;        % Reference sampling frequency, in Hz

    load(reference);                        % r1, signals, target
    refSpikeTimes = target.targettimes.';   % in seconds, convert to column vector

    % Load plexon data
    waveformFile = sprintf('%s_analog.mat', data);
    spikeFile = sprintf('%s_spkwav.mat', data);
    load(waveformFile);
    load(spikeFile);

    % Time vector for plexon
    waveformData = double(AD12);
    waveformData = waveformData./max(abs(waveformData));
    plexTime = double(AD12_ts);       % generate time vector for plexon waveform

    % interpolate waveformData to 31250Hz.
    waveformData = interp1(plexTime, waveformData, plexTime(1):1/Fs_ref:plexTime(end));

    % Plexon recording might have extra stuff in the end due to manually stopping audio signal.
    % Cut this off manually. Make sure the waveform is not more than 2 seconds longer than reference.
    maxLen = numel(signals)+2*Fs_ref;
    maxTime = maxLen/Fs_ref;
    if numel(waveformData) > maxLen,
        waveformData = waveformData(1:maxLen);
    end

    [refFirstPeak, dataFirstPeak] = align_by_waveform_firstSpike(waveformData, signals, Fs_ref, refSpikeTimes, 0.7, 'Plexon Reference and Recording');

    % Now get the Plexon spike timings
    timelag = (dataFirstPeak-refFirstPeak)/Fs_ref;
    dataSpikeTimes = sig001a - timelag;     % shift by the signal offset
    % make sure we don't include extra spikes from not stopping audio signal fast enough.
    if ~find(dataSpikeTimes > (maxTime - timelag)),
        dataSpikeTimes = dataSpikeTimes(1:min(find(dataSpikeTimes > (maxTime - timelag))));
    end

    [refSpikeTimes, dataSpikeTimes] = compareSpikeTimes(refSpikeTimes, dataSpikeTimes, Fs_ref); 
end

function [refSpikeTimes, dataSpikeTimes] = compareSpikeTimes(refSpikeTimes, dataSpikeTimes, Fs_ref)

    % Plot regression of all but the first spike times. Ideally y=x+/-b, b is some small offset
    numSpikes = min(numel(dataSpikeTimes), numel(refSpikeTimes));
    plotLinearRegression(refSpikeTimes(2:numSpikes), dataSpikeTimes(2:numSpikes), ...
                        'reference spike times (s)', 'Plexon recorded spike times (s)');

    % Plot the raster plot for comparison, function in the owl monkey code directory
    rasterplot({refSpikeTimes(2:end), dataSpikeTimes(2:end)});
    title('Plexon: refSpikeTimes, dataSpikeTimes');
    xlabel('time (s)');

    % Plot binned firing rates, analyze cross-correlation.
    
    binSize= [10,20,50,100];  % bin times in ms
    [d_CC, acor_lag] = binned_xcorr(refSpikeTimes(2:end), dataSpikeTimes(2:end), binSize);
end




